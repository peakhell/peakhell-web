<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Peakhell的个人网站</title>
  <subtitle>编程,围棋,故事</subtitle>
  <link href="/peakhell-web/atom.xml" rel="self"/>
  
  <link href="https://peakhell.github.io/peakhell-web/"/>
  <updated>2018-01-17T07:09:07.435Z</updated>
  <id>https://peakhell.github.io/peakhell-web/</id>
  
  <author>
    <name>peakhell</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于自动化传输任务的总结</title>
    <link href="https://peakhell.github.io/peakhell-web/2018/01/16/%E5%85%B3%E4%BA%8E%E8%87%AA%E5%8A%A8%E5%8C%96%E4%BC%A0%E8%BE%93%E4%BB%BB%E5%8A%A1%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>https://peakhell.github.io/peakhell-web/2018/01/16/关于自动化传输任务的总结/</id>
    <published>2018-01-16T08:01:23.000Z</published>
    <updated>2018-01-17T07:09:07.435Z</updated>
    
    <content type="html"><![CDATA[<p>​    前段时间一直在做这个定时传输PDF文件的工作, 具体的工作流程也不是很复杂. 首先在根据一些条件从mongoDB的数据库中取出PDF文件, 然后进行打包压缩, 最后再通过sftp协议把文件发出去. 说来简单, 实则还是有一些难点的. 首先数据库其实有两个, 一个oracle 数据库, 一个mongoDB数据库, 首先要从oracle 数据库中query出mongoDB 的ID, 由于oracle数据库表众多, 关系复杂, 筛选规则也颇为麻烦, 这一步还是花费了不少时间. 其次是公司为了数据的安全, mongoDB数据库只能通过linux 服务器上的内网访问, 这就是有很大一部分编程工作我是无法借助ide工具的, 只能使用vim, 既没有自动补全也没有语法检测, 写起来还是挺麻烦的. 第三是自动化任务的权限问题, 运行这个程序的是一个普通的账号, 而在Linux中, 普通账号要运行自动化程序要修改多个地方的权限, 不知道此时的我还是走了不少弯路. 至于异常情况处理那些,主要与公司业务有关, 就不多讨论了. 闲话不多说了, 开始正文.</p>
<ol>
<li>python 连接oracle</li>
</ol>
<p>linux下在python使用oracle数据库, 还是要做一些准备工作的. 大致分为3步. </p>
<ul>
<li><p>首先是到oracle的官网(<a href="http://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html?ssSourceSiteId=otncn)下载对应的客户端和依赖" target="_blank" rel="external">http://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html?ssSourceSiteId=otncn)下载对应的客户端和依赖</a>, 现在最新的版本是12.2.0.1.0. 要下载的是 <a href="http://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html?ssSourceSiteId=otncn" target="_blank" rel="external">oracle-instantclient12.2-basic-12.2.0.1.0-1.x86_64.rpm</a> 和<a href="http://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html?ssSourceSiteId=otncn" target="_blank" rel="external">oracle-instantclient12.2-devel-12.2.0.1.0-1.x86_64.rpm</a>, 或者对应的zip版本, 如果是rpm就直接用rpm直接安装, 如果是zip则先解压缩, 在安装.</p>
</li>
<li><p>添加环境变量, 如无意外的话, oracle客户端会被安装在这个目录/usr/lib/oracle, 这时需要把这个添加到环境变量中, 好让其他程序可以调用. 注意安装的版本, 还有下面导入环境变量的方法是暂时性的, 只在当前shell起作用, 如果想永久添加, 可以修改对应的配置文件, 具体方法可以上网查.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/lib/oracle/12.2/client64/lib:<span class="variable">$LD_LIBRARY_PATH</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用pip安装对用的oracle库.</p>
</li>
</ul>
<p>本项目中我用的是cx_Oracle这个包,  API还是挺简洁易懂的, 用起来也很顺手, 首先连接数据库, 然后创建cursor, 用cursor来执行SQL语句.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 连接数据库</span></div><div class="line">db = cx_Oracle.connect(username, password, IP)</div><div class="line"><span class="comment"># 执行语句</span></div><div class="line">cursor = db.cursor()</div><div class="line">data = cursor.execute(</div><div class="line">                    <span class="string">"SELECT BAR_CODE FROM PLATFORM WHERE PARENTNODENO='' OR NODENO=''"</span>)</div><div class="line"><span class="comment"># 关闭连接</span></div><div class="line">db.close()</div></pre></td></tr></table></figure>
<p>当然, cx_Oracle这个包还提供了很多功能, 这里就不详细讨论了, 网上有很多教程, 在这个项目我用到的只有这些了.写的时候最好把数据库的相关操作写成一个类, 这样结构比较清晰, 维护起来也方便.</p>
<ol>
<li>python 连接 mongoDB</li>
</ol>
<p>与oracle 数据库不同, mongoDB是NoSQL数据库类型的一种, 是一种基于分布式文件存储的数据库.  要使用mongoDB , 首先要到mongoDB的官网下载相应的客户端, 然后安装, 无论什么系统, 由于我使用的是Linux系统, 这里就只讲linux怎么安装. </p>
<p>首先到mongoDB的官网下载对应的客户端(<a href="https://www.mongodb.com/download-center?jmp=nav" target="_blank" rel="external">https://www.mongodb.com/download-center?jmp=nav</a>), 安装即可. 我记得是没有任何坑的, 不过要下载貌似要注册一个账号. 安装完之后可以在命令行打mongo,如过成功安装的话这时应该已经进入mongoDB数据库了.  关于mongoDB数据库还有非常多的知识值得一聊, 只是本文是简单的总结,这里就不涉及了. 可以查看菜鸟上的教程.</p>
<p>python使用mongoDB的一些常用操作也不难. 主要还是那几个操作, 连接, 筛选, 读取等等. </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 导入相应的包</span></div><div class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</div><div class="line"><span class="comment"># 连接数据库</span></div><div class="line">client = MongoClient(host, port)</div><div class="line"><span class="comment"># 连接特定的集合</span></div><div class="line">db = client[dbname]</div><div class="line"><span class="comment"># 插入数据</span></div><div class="line">db.posts.insert_one(data)</div><div class="line"><span class="comment"># 查看数据</span></div><div class="line">db.posts.find_one()</div><div class="line"><span class="comment"># 删除数据</span></div><div class="line">db.posts.delete_one()</div></pre></td></tr></table></figure>
<p>以上就是一些常用的操作, 在本项目中还有一个比较特殊的, 我要去除mongoDB存储的PDF文件, 这稍微有点不同. mongoDB使用GridFS 用于存储和恢复那些超过16M（BSON文件限制）的文件(如：图片、音频、视频等)。GridFS 会将大文件对象分割成多个小的chunk(文件片段),一般为256k/个,每个chunk将作为MongoDB的一个文档(document)被存储在chunks集合中。GridFS 用两个集合来存储一个文件：fs.files与fs.chunks。因此要取出PDF文件要用到gridfs</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> gridfs <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</div><div class="line"><span class="keyword">from</span> bson.objectid <span class="keyword">import</span> ObjectId</div><div class="line">fs = GridFS(db, <span class="string">"fs"</span>)</div><div class="line"><span class="comment"># id是存储的时候生成的唯一id值</span></div><div class="line">f = fs.get(ObjectId(str(id)))</div><div class="line"><span class="comment"># data二进制的pdf文件, 再保存即可</span></div><div class="line">data = f.read()</div><div class="line"><span class="keyword">with</span> open(<span class="string">"test.pdf"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</div><div class="line">f.write(data)</div></pre></td></tr></table></figure>
<ol>
<li>自动化任务</li>
</ol>
<p>自动化任务还是有一些值得一提, 随手一百度你就会发现crontab这个Linux的工具就是用来构建自动化任务的, 并且用法也并不难. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 编辑自动化任务</span></div><div class="line">crontab <span class="_">-e</span>  </div><div class="line"><span class="comment"># 查看自动化任务列表</span></div><div class="line">crontab <span class="_">-l</span></div><div class="line"><span class="comment"># 删除自动化任务, 若不指定则删除当前用户的所有任务</span></div><div class="line">crontab -r</div></pre></td></tr></table></figure>
<p>自动化任务的格式也不复杂.如下所示</p>
<p>分 时 日 月 星期 要运行的命令</p>
<ul>
<li>第1列分钟0～59</li>
<li>第2列小时0～23（0表示子夜）</li>
<li>第3列日1～31</li>
<li>第4列月1～12</li>
<li>第5列星期0～7（0和7表示星期天）</li>
<li>第6列要运行的命令</li>
</ul>
<p>举几个例子就好懂了</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 每分钟执行一次</span></div><div class="line">* * * * * myCommand</div><div class="line"><span class="meta">#</span><span class="bash"> 每天晚上10点执行</span></div><div class="line">0 22 * * * myCommand</div><div class="line"><span class="meta">#</span><span class="bash"> 每周六晚上11点重启smb服务</span></div><div class="line">0 23 * * 6 /etc/init.d/smb restart</div><div class="line"><span class="meta">#</span><span class="bash"> 每月1、10、22日的4 : 45重启smb</span></div><div class="line">45 4 1,10,22 * * /etc/init.d/smb restart</div></pre></td></tr></table></figure>
<p>大致是这样, 自己体会一下很好懂. 接下来说点实用的. 怎么判断这条命令执行了没有呢? 实际上crontab 的自动化任务是会有log文档, 我们在对应的时间点查看这个文档有没有这条记录就行了. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail /var/<span class="built_in">log</span>/cron</div></pre></td></tr></table></figure>
<p>万一没有生效呢, 我们怎么知道哪里错误, 可以这样, 用重定向命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">45 4 1,10,22 * * /etc/init.d/smb restart &amp;&gt; msg.txt</div></pre></td></tr></table></figure>
<p>这样万一发生错误我们就可以查看msg.txt文件来查看是哪里出了问题. </p>
<p>还有就是权限问题, 如果你有管理员权限那就不用考虑, 当你没有使用的账户并没有管理员权限的时候, 需要修改一下cron程序的权限, 不然是不会执行的.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">which cron</div><div class="line"><span class="meta">#</span><span class="bash"> 一般是这个目录/usr/sbin/cron</span></div><div class="line">ll /usr/sbin/cron</div><div class="line"><span class="meta">#</span><span class="bash"> 结果大概是这样-rwxr-xr-x 1 root root 44472 4月   6  2016 cron*</span></div><div class="line"><span class="meta">#</span><span class="bash"> 如果最后一位没有x权限, 那就要改一下</span></div><div class="line"><span class="meta">#</span><span class="bash"> 还有一个地方的权限要改</span></div><div class="line">which crontab</div><div class="line"><span class="meta">#</span><span class="bash">/usr/bin/crontab</span></div><div class="line">ll /usr/bin/crontab</div><div class="line"><span class="meta">#</span><span class="bash">-rwxr-sr-x 1 root crontab 36080 4月   6  2016 /usr/bin/crontab*</span></div><div class="line"><span class="meta">#</span><span class="bash"> 注意看上面的中间部分, 有一个字母为s, 我们知道文件的权限一般为r, w, x. 这个s是什么鬼, 其实是Set GID，简称为SGID的特殊权限.这个解释起来听麻烦的, 大家看看鸟哥的linux私房菜, 讲的非常清楚.简而言之, 要是普通用户可以执行自动化任务, 就要是最后三位的权限符合要求.一般有x权限即可.</span></div></pre></td></tr></table></figure>
<p>还有就是目录的问题, 如果你在你在python程序中使用了os模块来指定路径, 那有一点还是要注意一下的. 加入你的项目在/home/hsgao/PDF_transfer, 然后你在入口程序中有这么几行代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line">base_dir = os.path.abspath(<span class="string">""</span>)</div></pre></td></tr></table></figure>
<p>你觉得base_dir的路径应该是什么呢, 是/home/hsgao/PDF_transfer吗? 并不是, 而是/home/hsgao, 也就是当前用户的home目录, 这点要注意了.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    前段时间一直在做这个定时传输PDF文件的工作, 具体的工作流程也不是很复杂. 首先在根据一些条件从mongoDB的数据库中取出PDF文件, 然后进行打包压缩, 最后再通过sftp协议把文件发出去. 说来简单, 实则还是有一些难点的. 首先数据库其实有两个, 一个o
    
    </summary>
    
    
      <category term="python linux定时任务" scheme="https://peakhell.github.io/peakhell-web/tags/python-linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>爬虫登录站点那点事</title>
    <link href="https://peakhell.github.io/peakhell-web/2017/10/18/%E7%88%AC%E8%99%AB%E7%99%BB%E5%BD%95%E7%AB%99%E7%82%B9%E9%82%A3%E7%82%B9%E4%BA%8B/"/>
    <id>https://peakhell.github.io/peakhell-web/2017/10/18/爬虫登录站点那点事/</id>
    <published>2017-10-18T02:24:54.000Z</published>
    <updated>2017-10-19T06:48:04.382Z</updated>
    
    <content type="html"><![CDATA[<p>​    最近在学习使用Python进行网络数据采集, 研究了一下站点登录的模拟, 发现还是有很多有趣的东西的, 所以做个笔记, 跟有缘人分享一下(如果你能看到这篇文章的话).</p>
<p>​    <strong>从登录github说起</strong></p>
<p>​    作为全球最大的同性交友网站, 自然有很多资源值得下载和收藏, 于是想用Python写个爬虫抓取一些信息.首先打开github的官网, 审核一下登录页面.</p>
<p>​    <img src="/peakhell-web/2017/10/18/爬虫登录站点那点事/login_page.png" alt="登录页面"></p>
<p><img src="/peakhell-web/2017/10/18/爬虫登录站点那点事/html.png" alt="登录表单"></p>
<p>​    从登录界面上看, 请求数据只有用户名或者邮箱以及对应的密码, 从审核的元素可以看出, 请求数据是发送给 <a href="https://github.com/session" target="_blank" rel="external">https://github.com/session</a> 这个url的. 再仔细查看的话(截图没有显示), 会发现用户名或邮箱这个input标签的name属性为login, 而password标签的name属性为password. 看起来该有的都有的, 只要构造对应的请求数据向这个url发起请求应该就行了, 先试试看.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">url = <span class="string">"https://github.com/session"</span></div><div class="line">data = &#123;</div><div class="line">    <span class="string">"login"</span>: <span class="string">"peakhell"</span>,</div><div class="line">    <span class="string">"peakhell"</span>: <span class="string">"password"</span></div><div class="line">&#125;</div><div class="line">response = requests.post(url, data=data)</div><div class="line">print(response.content)</div></pre></td></tr></table></figure>
<p>​    但是输出却是:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">b&apos;Cookies must be enabled to use GitHub.&apos;</div></pre></td></tr></table></figure>
<p>​    看来是github为了自己站点的安全, 用了一个session ID来记录你登录的过程. 那问题也不难解决, 只要设置一个session就好了. 改一下代码再试一次</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">url = <span class="string">"https://github.com/session"</span></div><div class="line">session = requests.session()</div><div class="line">session.get(<span class="string">"https://github.com/login"</span>)</div><div class="line">data = &#123;</div><div class="line">    <span class="string">"login"</span>: <span class="string">"peakhell"</span>,</div><div class="line">    <span class="string">"peakhell"</span>: <span class="string">"sheng709"</span></div><div class="line">&#125;</div><div class="line">response = session.post(url, data=data)</div><div class="line">print(response.content.decode(<span class="string">"utf-8"</span>))</div></pre></td></tr></table></figure>
<p>​    好了, 页面是返回了, 但是返回的html代码却出奇的短, 这不太合理, 于是把返回的数据存成一个html文件再打开, 结果是这样的. </p>
<p><img src="/peakhell-web/2017/10/18/爬虫登录站点那点事/unexceped.png" alt="unexpected">    </p>
<p>​    ummm, 还是不对, 很有可能是请求的数据不符合要求, 亦或者是请求头部不符合要求. 没关系, 祭出大杀器, chrome开发者工具中的network仔细查看一下请求过程都发生了什么. </p>
<p><img src="/peakhell-web/2017/10/18/爬虫登录站点那点事/inspect.png" alt="inspect">    </p>
<p>​    注意红框部分, 果然是请求的数据格式不对, 但是其中的authenticity_token这一属性是啥东西, 想一想还是很容易知道的,这不就是为了防止请求跨域伪造而携带的一个token. 这东西怎么获取呢, 如果你之前写过flask程序的话应该非常清楚, 这东西会在隐藏的input标签中, 可以通过审核元素找到, 那就好办了. 再把header头部也依照network中的照猫画虎修改一下. 现在在试试.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line">url = <span class="string">"https://github.com/session"</span></div><div class="line">session = requests.session()</div><div class="line">res = session.get(<span class="string">"https://github.com/login"</span>).content.decode(<span class="string">"utf-8"</span>)</div><div class="line">bsObj = BeautifulSoup(res)</div><div class="line">authenticity_token = bsObj.find(<span class="string">"input"</span>, &#123;<span class="string">"name"</span>: <span class="string">"authenticity_token"</span>&#125;).attrs[<span class="string">"value"</span>]</div><div class="line">print(authenticity_token)</div><div class="line">headers = &#123;</div><div class="line">    <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,</div><div class="line">    <span class="string">"Origin"</span>: <span class="string">"https://github.com"</span>,</div><div class="line">    <span class="string">"Referer"</span>: <span class="string">"https://github.com/"</span>,</div><div class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.91 Safari/537.36"</span></div><div class="line">&#125;</div><div class="line">data = &#123;</div><div class="line">    <span class="string">"commit"</span>: <span class="string">"Sign in"</span>,</div><div class="line">    <span class="string">"utf8"</span>: <span class="string">"✓"</span>,</div><div class="line">    <span class="string">"authenticity_token"</span>: authenticity_token,</div><div class="line">    <span class="string">"login"</span>: <span class="string">"peakhell"</span>,</div><div class="line">    <span class="string">"password"</span>: <span class="string">"sheng709"</span></div><div class="line">&#125;</div><div class="line">response = session.post(url, data=data)</div><div class="line">print(response.content.decode(<span class="string">"utf-8"</span>))</div></pre></td></tr></table></figure>
<p>​    嗯, 现在就可以了, 一点毛病都没有. 当然为了方便我们下次登录, 我们最好保存一下cookies, 下次利用cookies登录就方便的多了. 现在这个github的模拟登录已经有点长了, 现在把cookies的功能加上去, 并写成一个类.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> http.cookiejar <span class="keyword">as</span> cookiejar</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GithubLogin</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.login_url = <span class="string">"https://github.com/login"</span></div><div class="line">        self.post_url = <span class="string">"https://github.com/session"</span></div><div class="line">        self.target_url = <span class="string">"https://github.com/settings/profile"</span></div><div class="line">        self.headers = &#123;</div><div class="line">            <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,</div><div class="line">            <span class="string">"Origin"</span>: <span class="string">"https://github.com"</span>,</div><div class="line">            <span class="string">"Referer"</span>: <span class="string">"https://github.com/"</span>,</div><div class="line">            <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.91 Safari/537.36"</span></div><div class="line">        &#125;</div><div class="line">        self.session = requests.session()</div><div class="line">        self.session.cookies = cookiejar.LWPCookieJar(filename=<span class="string">"github_cookie"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_authenticity_token</span><span class="params">(self)</span>:</span></div><div class="line">        res = self.session.get(self.login_url)</div><div class="line">        bsObj = BeautifulSoup(res.content.decode(<span class="string">"utf-8"</span>))</div><div class="line">        authenticity_token = bsObj.find(<span class="string">"input"</span>, &#123;<span class="string">"name"</span>: <span class="string">"authenticity_token"</span>&#125;).attrs[<span class="string">"value"</span>]</div><div class="line">        <span class="keyword">return</span> authenticity_token</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_cookie</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.session.cookies.load(ignore_discard=<span class="keyword">True</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            print(<span class="string">"没有对应的cookies文件, 导入失败"</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bool_login</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.load_cookie():</div><div class="line">            res = self.session.get(self.target_url)</div><div class="line">            <span class="keyword">if</span> res.status_code == requests.codes.ok:</div><div class="line">                print(<span class="string">"已经登录"</span>)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(<span class="string">"cookies已经失效, 请重新登录"</span>)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self, username, password)</span>:</span></div><div class="line">        authenticity_token = self.get_authenticity_token()</div><div class="line">        post_data = &#123;</div><div class="line">            <span class="string">'commit'</span>: <span class="string">'Sign in'</span>,</div><div class="line">            <span class="string">'utf8'</span>: <span class="string">'✓'</span>,</div><div class="line">            <span class="string">'authenticity_token'</span>: authenticity_token,</div><div class="line">            <span class="string">'login'</span>: username,</div><div class="line">            <span class="string">'password'</span>: password</div><div class="line">        &#125;</div><div class="line">        res = self.session.post(self.post_url, data=post_data, headers=self.headers)</div><div class="line">        self.session.cookies.save()</div><div class="line">        <span class="keyword">return</span> res</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    github = GithubLogin()</div><div class="line">    <span class="keyword">if</span> github.bool_login():</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        github.login(<span class="string">"username"</span>,<span class="string">"password"</span>)</div></pre></td></tr></table></figure>
<p>​    非常容易读懂的一个类, 有了cookies,下次登录就可以直接载入cookies进行访问了, 这样省事很多.</p>
<p>​    回顾一下上面的例子, 最简单的认证登录就是找到表单的提交url, 然后利用python构造出对应的username和password字典, 用这个数据去请求就行了. 然而事实上并不是那么简单, 大多数站点为了提高自己网站的安全性,都会采取一些措施, 例如github采用的authenticity_token的方式. 甚至有一些站点必须使用特定的headers才能真正获取数据, 对付这一类的方法也很简单, 就是查看chrome的登录请求, 把headers 和post_data都按照规范的来, 多多思考, 一般都可以解决.</p>
<p>​    补充一点, headers头部一般只需要注意以下几个属性, Host, Origin,Referer,User-Agent, 尤其是User-Agent属性, 至于这些属性的含义是什么, 那就不是本篇博客的讨论范围的, 有兴趣的自己可以仔细查阅网上的资料.</p>
<p><strong>烦人的验证码</strong></p>
<p>​    过两天补上</p>
<p>​    </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    最近在学习使用Python进行网络数据采集, 研究了一下站点登录的模拟, 发现还是有很多有趣的东西的, 所以做个笔记, 跟有缘人分享一下(如果你能看到这篇文章的话).&lt;/p&gt;
&lt;p&gt;​    &lt;strong&gt;从登录github说起&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
    
      <category term="爬虫, 模拟登录" scheme="https://peakhell.github.io/peakhell-web/tags/%E7%88%AC%E8%99%AB-%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记之JavaScript语言精粹</title>
    <link href="https://peakhell.github.io/peakhell-web/2017/09/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8BJavaScript%E8%AF%AD%E8%A8%80%E7%B2%BE%E7%B2%B9/"/>
    <id>https://peakhell.github.io/peakhell-web/2017/09/01/读书笔记之JavaScript语言精粹/</id>
    <published>2017-09-01T01:43:49.000Z</published>
    <updated>2017-11-29T02:27:35.436Z</updated>
    
    <content type="html"><![CDATA[<p>​       作为一个前端开发人员,  js的一些坑已经踩了不少, 但这本书总结的非常好, 把精华部分和糟粕部分都非常系统详细的列出来, 个人认为附录部分的js毒瘤与糟粕非常值得一读, 如果你是刚开始接触js, 那就更值得你好好看看了, 绝对能少踩很多坑. 这里做个读书笔记, 总结一下这本书的附录部分, 也就是js的坑.</p>
<ul>
<li><p>全局变量</p>
<p>对全局变量的依赖可能是JavaScript最糟糕的特性. 很多编程语言也有全局变量, 例如Java使用public static 关键字定义全局变量, 但在JavaScript中, 由于没有连接器(linker), 所有的编译单元都在如到一个公共全局对象中(也就是window对象). 也许在小型程序中这会带来很多便利, 但当程序变得复杂时, 全局变量便会使程序变得难以维护, 因为无论在全局哪一个地方更改全局变量的值, 全局变量都会改变. 更糟糕的是如果我们没有使用var关键字进行变量的定义, JavaScript会默认该变量为全局变量, 不管在程序的哪个地方.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  globle = <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line">test();</div><div class="line"><span class="built_in">console</span>.log(globle)   <span class="comment">//10</span></div></pre></td></tr></table></figure>
<p>由于globle没有用var关键字修饰, JavaScript会把globle当成全局变量, 导致在函数外也可以使用. 这是一个非常糟糕的设计, 因此声名变量时, 一定要在前面加关键字 var. </p>
</li>
<li><p>作用域</p>
<p>JavaScript与C语言类似, 都是用{}来表示代码块. 但糟糕的是, 与C语言不同, JavaScript没有提供相应的块级作用域, 也就是说, 代码块中生命的变量在包含此码块的函数的任何位置都是可见的, 听起来十分拗口, 举个例子就好懂多了. </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</div><div class="line">  <span class="keyword">var</span> g = i;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(g)  <span class="comment">//4</span></div></pre></td></tr></table></figure>
<p>for循环中的变量 g 是属于块级代码, 但在全局中却可以调用. 这就是 js 的作用域问题, 与之相对的是C语言的块级作用域. 先看以下代码</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">   <span class="keyword">int</span> i = <span class="number">2</span>;</div><div class="line">   <span class="keyword">if</span> (i)&#123;</div><div class="line">   <span class="keyword">int</span> j = <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(j);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行这段代码, 编译器会报错. error: ‘j’ was not declared in this scope. 这是由于j是在块级作用域if语句里面的. 所以在全局中式无法使用的. </p>
<p>因此在JavaScript中要注意这一点, 由于js的这个特性, 我们最好在每个函数的开头部分就声明所有的变量.</p>
</li>
<li><p>自动插入分号</p>
<p>JavaScript并不强制使用 分号 作为一个语句的结尾, 但当你忘记在语句中使用 分号做为结尾时, 它会自动插入分号来试图修正程序. 注意了, 这个特性可能会出现一些神奇的问题. 例如以下的 return 语句.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> </div><div class="line">&#123;</div><div class="line">  <span class="attr">type</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">msg</span>: <span class="string">"ok"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码看似返回一个包含元素的对象, 但由于JavaScript自动插入分号的特性, 实际执行的代码已经变成了</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span>; </div><div class="line">&#123;</div><div class="line">  <span class="attr">type</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">msg</span>: <span class="string">"ok"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样就导致返回值变成了 undefined, 一定要注意, 上例正确的写法应该把　“{“ 　放在上一行，也就是</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">  <span class="attr">type</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">msg</span>: <span class="string">"ok"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>typeof </p>
<p>typeof 运算符可以用来识别变量或常量的类型．部分情况下它是可以正常判断的, 但是</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">type <span class="literal">null</span>;     <span class="comment">// object</span></div></pre></td></tr></table></figure>
<p>返回的是object 而不是 null ! 这一点千万注意．我们可以用其他的方法来判断一个变量是否为null，最简单的方法就是</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">value === <span class="literal">null</span>;</div></pre></td></tr></table></figure>
<p>不知道你有没有注意到，由于typeof无法判断object 和null, 因此判断一个变量是否为object时，一定要再三小心．</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> value === <span class="string">'object'</span>;    <span class="comment">//错误的判断方法</span></div><div class="line">value &amp;&amp; type value === <span class="string">'object'</span>;  <span class="comment">// 正确，先判断是否为ｎｕｌｌ</span></div></pre></td></tr></table></figure>
</li>
<li><p>parseInt</p>
<p>曾经我在面试的时候遇到过一道经典的JavaScript题，至今让我印象深刻．</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>];</div><div class="line"><span class="keyword">var</span> num;</div><div class="line">num = arr.map(<span class="built_in">parseInt</span>);</div></pre></td></tr></table></figure>
<p>很简单的代码，就是把arr数组中的元素转化成整数，理论上来说应该是［１，２，３，４，５］, 是的，理论上．然而实际结果确实是[1, NaN, NaN, NaN, NaN]．其实原因也不难，就是因为 parseInt 方法其实是可以带两个参数的，第一个参数是要转化成数字的字符串，另一个是指定进制，默认是使用十进制来进行转换，这里举两个例子说明一下．</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">parseInt</span>(<span class="string">'10'</span>, <span class="number">8</span>);  <span class="comment">// 8</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">'10'</span>);     <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<p>我想你已经知道问题所在了，还不知道？再看看map方法的语法．</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> new_array = arr.map(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">currentValue, index, array</span>) </span>&#123;</div><div class="line">    <span class="comment">// Return element for new_array</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也就是说，实际运行过程中数组的索引会被当成parseInt的第二个参数．也就是像下面这样．所以就会出现这样看似不合理的结果了．要避免这种情况也不难，把parseInt 换成Number 就可以了．</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">parseInt</span>(<span class="string">'1'</span>,<span class="number">0</span>);</div><div class="line"><span class="built_in">parseInt</span>(<span class="string">'2'</span>,<span class="number">1</span>);</div><div class="line"><span class="built_in">parseInt</span>(<span class="string">'3'</span>,<span class="number">2</span>);</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>浮点数</p>
<p>这个其实不算坑，只是需要注意一下，先看下面的例子．</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">0.1</span>+<span class="number">0.2</span>; <span class="comment">// 0.30000000000000004</span></div></pre></td></tr></table></figure>
<p>第一次看到这个结果的时候我也吓了一跳，但其实原因很简单，因为CPU的计算其实都是二进制的，而二进制的浮点数不能正确的处理十进制的小数点，说以会导致计算结果不精准，这不仅是JavaScript的问题，很多编程语言也有同样的问题，例如Python，Java．幸运地是，整数是可以完美处理的．对于有小数点的运算，我们可以指定计算精度来避免这样的问题．</p>
</li>
<li><p>NaN</p>
<p>不得不说这是JavaScript中一个奇葩的变量类型，它表示一个特殊的数量值，它不代表一个数字，当数学表达式无法计算时会用NaN表示，亦或者把非数字形式的字符串转换成数字时．但</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="literal">NaN</span> === <span class="string">'number'</span>; <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>也就是说typeof 是无法辨认数字与NaN的（typeof要你有何用！），更恶心的是</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span>; <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>真的无话可说，发明NaN这个关键字绝对是设计者脑抽了．要判断一个变量只能用一个方法；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">isNaN</span>(<span class="literal">NaN</span>); <span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>延伸一下，由于上面的问题，我们是无法直接用 typeof 方法来判断一个变量是不是数字的．千万要注意，别掉坑里了，我们可以加一个判断．</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> value === <span class="string">'number'</span> &amp;&amp; <span class="built_in">isFinite</span>(value);</div></pre></td></tr></table></figure>
</li>
<li><p>数组</p>
<p>JavaScript 中没有真正的数组，JavaScript 中没有真正的数组，JavaScript 中没有真正的数组．重要的事情说三遍．在JavaScript中，一切皆为对象，数组其实是一个有length的对象．这并不都是坏事，由于这个特性，你不必给数组设置维度，也不用担心越界错误（但其实这更容易导致出现隐藏的ｂｕｇ）．但这也导致其性能下降的厉害．同理的，你也无法用typeof直接判断一个变量是否为数组（typeof要你有何用！！），你需要检查一个名作constructor的属性．</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> value === <span class="string">'object'</span> &amp;&amp; value.constructor === <span class="built_in">Array</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>对象</p>
<p>是的，JavaScript 的对象也是要我们注意的．与Python, Java　不同，JavaScript 中的对象不是通过类来定义的，而是通过原型链．因此，当你创建一个空对象时，该对象绝对不是空的，而是包含了从上一级中继承下来的各种方法与属性，这在有时候会导致问题变得很麻烦．举个例子，你现在在做一个文本分析脚本，首先需要统计一篇文章中每个单词出现的个数，这个时候就要十分小心了．先看下面的代码．</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text = <span class="string">"To deal with this, you can generate a stack trace in the constructor of the exception object during the throw exception statement. "</span>;</div><div class="line"><span class="keyword">var</span> words = text.toLowerCase().split(<span class="regexp">/[\s,.]+/</span>)</div><div class="line"><span class="keyword">var</span> count = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> word;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;words.length;i++)&#123;</div><div class="line">  word = words[i];</div><div class="line">  <span class="keyword">if</span> (count[word])&#123;</div><div class="line">    count[word] += <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span>&#123;</div><div class="line">    count[word] = <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码很简单，就是统计一下每个单词出现的次数，但如果查看 count.constructor,你会发现 输出了这个鬼东西：”function Object() { [native code] }1”，原因就是上面所说的. count对象继承自Object.prototype．而Ｏbject.prototype 中包含着一个constructor的对象．如何避免这个问题呢，我们可以做一个判断，检测成员类型，是数字才进行处理．</p>
</li>
<li><p>其他</p>
<p>接下来的东西就不细讲了，都是不建议使用的．</p>
<p>＝＝　这个不用说了吧，大家都知道</p>
<p>with　别用</p>
<p>eval     有坑，用前详细查看文档．</p>
<p>new　尽量别用</p>
<p>void    别用</p>
<p>​</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​       作为一个前端开发人员,  js的一些坑已经踩了不少, 但这本书总结的非常好, 把精华部分和糟粕部分都非常系统详细的列出来, 个人认为附录部分的js毒瘤与糟粕非常值得一读, 如果你是刚开始接触js, 那就更值得你好好看看了, 绝对能少踩很多坑. 这里做个读书笔
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://peakhell.github.io/peakhell-web/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>MySQL用户管理</title>
    <link href="https://peakhell.github.io/peakhell-web/2017/07/05/MySQL%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
    <id>https://peakhell.github.io/peakhell-web/2017/07/05/MySQL用户管理/</id>
    <published>2017-07-05T09:26:52.000Z</published>
    <updated>2017-10-16T03:55:12.109Z</updated>
    
    <content type="html"><![CDATA[<p>​    今天写了个爬虫, 想要使用MySQL数据库存储抓取的信息, 尴尬的发现自己忘记了密码, 嘛.谷歌一下总是会发现解决方法的, 但按照几个博客的方法看下来, 却意外的都出现了问题, 于是去MySQL官网看了看, 原来是由于MySQL的版本升级(现在是5.7.18版本), 有一些功能和字段已经有所改变, 这才导致那些博客的解决方法出现问题. 这里做个常用操作的总结, 权当笔记.当然, 只针对linux操作系统.</p>
<ol>
<li>登录</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u username -p</div></pre></td></tr></table></figure>
<p>登录是最简单的操作了, 上面的命令会让你输入用户的密码, 正确即可进入mysql了.</p>
<ol>
<li>创建新用户</li>
</ol>
<p>只有具有管理员身份的用户才能创建新用户, 最常见的就是root用户, 先使用root用户登录mysql:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure>
<p>然后选择mysql数据库, mysql 是一个自带的特殊数据库, 用来管理用户 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use mysql;</div></pre></td></tr></table></figure>
<p>创建新用户, 其中username是你要创建的用户名, password是你的密码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create user &apos;username&apos;@&apos;localhost&apos; identified by &apos;password&apos;</div></pre></td></tr></table></figure>
<p>让操作生效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flush privileges;</div></pre></td></tr></table></figure>
<p>然后就可以使用新用户登录了.</p>
<ol>
<li>查询用户</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">use mysql;</div><div class="line">select user,host from mysql.user</div><div class="line">flush privileges;</div></pre></td></tr></table></figure>
<p>这条命令会列出所有的用户名机其主机位置, 你会发现有两个特殊的用户名mysql.sys 和 debian-sys-maint, 这两个用户是系统自带的, 当我们忘记root密码时, 可以通过这两个账户登上去修改root密码</p>
<p><img src="/peakhell-web/2017/07/05/MySQL用户管理/search.png" alt="查看用户"></p>
<ol>
<li>删除用户</li>
</ol>
<p>通过查询我们可以知道有哪些用户, 如果要删除某个用户的话, 可以用这个命令, 其中username是你要删除的用户.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">use mysql;</div><div class="line">delete from mysql.user where (user,host) in (select &apos;username&apos;,&apos;localhost&apos;);</div><div class="line">flush privileges;</div></pre></td></tr></table></figure>
<ol>
<li>修改密码</li>
</ol>
<p>有时候可能需要修改用户的密码, 可以用下面的命令,其中newpassword是你要设置的新密码, user是用户名, 特别要注意的是, 如果mysql的版本是5.5之前的, 则要把authentication 字段改成password.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">use mysql;</div><div class="line">update mysql.user set authentication_string=password(’newpassword’) where User=’user’;</div><div class="line">flush privileges;</div></pre></td></tr></table></figure>
<ol>
<li>忘记管理员密码</li>
</ol>
<p>到了重点了, 网上有很多关于找回root密码的方法, 但其实有一个很简单的方法可以找回来, 还记得我在上面讲的特殊用户mysql.sys 和 debian-sys-maint吗, 我们可以利用这个特殊的用户来修改mysql root用户的密码.linux 有个特殊的文件保存了debian-sys-maint这个用户密码的配置文件, 如果你拥有管理员权限就可以打开这个文件, 登录这个账号, 然后修改root用户的密码.具体的操作如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/mysql/debian.cnf</div></pre></td></tr></table></figure>
<p>如果没有问题的话, 你会看到类似下面的文件.</p>
<p><img src="/peakhell-web/2017/07/05/MySQL用户管理/sys.png" alt="查看密码"></p>
<p>注意看遮住的那一栏, 那就是debian-sys-maint这个用户的密码, 接下来我们使用这个账号登录,密码就是上面遮住的那一栏</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u debian-sys-maint -p</div></pre></td></tr></table></figure>
<p>然后再使用上面所说的修改密码的方法修改root的密码即可.</p>
<ol>
<li>用户权限管理</li>
</ol>
<p>由于mysql默认的用户root权限太大, 一般只有在管理数据库的时候才会使用. 因此使用数据库时一般会创建一个新账号, 并赋予较小的用户权限以保证数据库的安全.</p>
<p>但当我们用这个账户登录之后,会发现无法操作任何数据库, 这时候就要给这个新创建的用户赋予权限了. </p>
<p><strong>赋予全部数据库的所有用户权限</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;username&apos;@&apos;localhost&apos;;</div></pre></td></tr></table></figure>
<p>看一下这个例子, grant是赋予的意思, privileges是特权的意思, <em>是通配符, \</em>.*的意思就是指全部的数据库, 由此可以看出mysql的语法是非常容易读懂的, 如果只想给某个特定数据库的权限呢, 也非常简单, 把  *.* 换成你要授权的数据库就行了.</p>
<p><strong>撤销赋予权限的操作</strong></p>
<p>有时候会发现赋予的权限太大了, 想要重新赋予权限.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">REVOKE ALL PRIVILEGES ON *.* FROM &apos;username&apos;@&apos;localhost&apos;;</div></pre></td></tr></table></figure>
<p>这个操作就可以撤销刚才赋予的权限了, 读起来也非常语义化.</p>
<p><strong>赋予特定的权限</strong></p>
<p>如果只想给这个用户读的权限而不赋予写数据的权限, 可以这样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GRANT SELECT, UPDATE ON *.* TO &apos;username&apos;@&apos;localhost&apos;</div></pre></td></tr></table></figure>
<p>这样该用户对所有额数据库都只能进行select 和 update操作.</p>
<p>其实所有的操作都只是对mysql表下User表的操作罢了, 更多的操作可以操作User表来实现, 有兴趣的可以去试一试,当然要格外小心就是了.</p>
<ol>
<li>推荐一个非常好用的工具</li>
</ol>
<p>不知道你平时用mysql的语句是什么体验, 我是觉得非常繁琐的, 作为一个懒人, 没有自动补全和提示真的挺痛苦的. 但这个社会总是有雷锋的, 这里推荐一个非常好用的命令行工具 - mycli. mycli是一个开源的项目, 多的不说,附上链接-<a href="https://github.com/dbcli/mycli" target="_blank" rel="external">https://github.com/dbcli/mycli</a>, 用过都说好, 良心推荐.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    今天写了个爬虫, 想要使用MySQL数据库存储抓取的信息, 尴尬的发现自己忘记了密码, 嘛.谷歌一下总是会发现解决方法的, 但按照几个博客的方法看下来, 却意外的都出现了问题, 于是去MySQL官网看了看, 原来是由于MySQL的版本升级(现在是5.7.18版本)
    
    </summary>
    
    
      <category term="MySQL" scheme="https://peakhell.github.io/peakhell-web/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>jQuery笔记(2) - 常见的DOM操作</title>
    <link href="https://peakhell.github.io/peakhell-web/2017/06/29/jQuery%E7%AC%94%E8%AE%B02/"/>
    <id>https://peakhell.github.io/peakhell-web/2017/06/29/jQuery笔记2/</id>
    <published>2017-06-29T01:47:08.000Z</published>
    <updated>2017-07-03T03:17:58.556Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>DOM操作之 属性与样式</p>
<p>​    在上一篇jQuery笔记1中把DOM元素节点的常用操作都介绍了一遍, 这一篇笔记仍是有关jQuery DOM的操作, 主要是DOM节点中属性与样式的添加, 更改删除等操作</p>
<h4 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h4><p>jQuery 使用attr和removeAttr这两个方法来对节点的属性进行操作, 其中attr方法可以用来获取和设置属性, removeAttr可以用来删除节点的属性.为方便说明,下面所有的例子都基于以下的html代码:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"go"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>围棋国手<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"柯洁"</span>&gt;</span>柯洁<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"唐韦星"</span>&gt;</span>唐韦星<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"李世石"</span>&gt;</span>李世石<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://github.com"</span> <span class="attr">title</span>=<span class="string">"默认提示"</span>&gt;</span>同性交友<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>属性的获取与设置</strong></p>
<p>jQuery中节点属性的获取与设置可以通过同一个方法来实现, 当传入的参数为一个时, attr方法可以获取节点的属性, 当传入的参数为两个时, attr方法可以设置节点的属性.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> title = $(<span class="string">"ul li"</span>).attr(<span class="string">"title"</span>)</div><div class="line"><span class="built_in">console</span>.log(title)</div></pre></td></tr></table></figure>
<p>打开控制台, 你可以看到输出了 <code>柯洁</code> , 从这里可以看出attr方法一个重要的特性,  <strong>如果有多个匹配的元素, 那么只会获取第一个元素的属性</strong>, 这点要牢记.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"li"</span>).attr(<span class="string">"class"</span>, <span class="string">"player"</span>)</div></pre></td></tr></table></figure>
<p>上面的代码给li 标签添加class属性, 打开浏览器查看源码, 可以看到源码变成了这样子:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"go"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">"font-size: 30px"</span>&gt;</span>围棋国手<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"柯洁"</span> <span class="attr">class</span>=<span class="string">"player"</span>&gt;</span>柯洁<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"唐韦星"</span> <span class="attr">class</span>=<span class="string">"player"</span>&gt;</span>唐韦星<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"李世石"</span> <span class="attr">class</span>=<span class="string">"player"</span>&gt;</span>李世石<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://github.com"</span> <span class="attr">title</span>=<span class="string">"默认提示"</span>&gt;</span>同性交友<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>也就是说, 每一个li标签都添加了class为player的属性, 这与获取的时候不太一样, 大家千万牢记在心. </p>
<p>如果要一次性给元素加点添加多个属性, jQuery还提供了一种便利的写法:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"ul li"</span>).attr(&#123;<span class="string">"class"</span>: <span class="string">"player"</span>, <span class="string">"name"</span>: <span class="string">"go"</span>&#125;)</div></pre></td></tr></table></figure>
<p>​</p>
<p><strong>属性的删除</strong></p>
<p>节点属性的删除可以使用removeAttr方法来实现, 例如要删除li标签中的title属性, 可以这么写</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"li"</span>).removeAttr(<span class="string">"title"</span>)</div></pre></td></tr></table></figure>
<p>这样就可以把所有匹配的元素节点中的title属性删除了. </p>
<p>​</p>
<h4 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h4><p>​    在前端开发中,我们通常会把样式写在class中, 然后在节点中引入. 因此对样式的操作大致可以分为两类, 一种是对class的操作, 另一种是直接对css进行处理, 下面将详细讲述jQuery的样式操作.</p>
<p><strong>样式的获取与设置</strong></p>
<p>样式的获取和设置可以使用css方法. 例如我们要获取h2标签的样式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"h2"</span>).css(<span class="string">"font-size"</span>)</div></pre></td></tr></table></figure>
<p>与attr方法一样,css方法带一个参数时是获取css样式, 带两个参数是设置节点属性的样式.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"h2"</span>).css(<span class="string">"color"</span>,<span class="string">"#444"</span>)</div></pre></td></tr></table></figure>
<p>上面的代码会给h2标签添加颜色为#444的样式.同样的, 我们还可以同时设置多个属性, 用法也是和attr方法相同.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"h2"</span>).css(&#123;</div><div class="line">	<span class="string">"color"</span>: <span class="string">"#333"</span>,</div><div class="line">  	<span class="string">"font-size"</span>: <span class="string">"40px"</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><strong>使用class进行样式的处理</strong></p>
<p>上面的方法是直接使用css方法对节点进行样式的获取与设置, 但在实际的前端开发中, 绝大多数的样式属性是卸载class中, 因此,jQuery也提供了一系列的方法供我们对class进行操作, 包括添加class的方法addClass, 删除class的方法removeClass, 切换class的方法toggleClass等等, 下面详细介绍这些方法进行样式的处理.</p>
<p><strong>追加样式</strong></p>
<p>为方便理解, 我们先写两个样式文件</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.highlight</span>&#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.blue</span>&#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#6FBFD7</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>给h2标签添加类名可以这么写</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"h2"</span>).addClass(<span class="string">"highlight"</span>)</div></pre></td></tr></table></figure>
<p>这样代码会给h2标签追加一个highlight的类名.如果要同时追加多个类名的话也是可以的, 只要用空格空开就行了.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"h2"</span>).addClass(<span class="string">"highlight blue"</span>)</div></pre></td></tr></table></figure>
<p>​</p>
<p><strong>移除样式</strong></p>
<p>用法和addClass一样, 只是作用是把类名从标签中移出去.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"h2"</span>).removeClass(<span class="string">"highlight"</span>)</div></pre></td></tr></table></figure>
<p>同样的,我们也可以同事移除多个类名.</p>
<p><strong>切换样式</strong></p>
<p>当前端开发中有时候我们会遇到这样一种情况, 那就是样式会反复切换, 取个简单的例子就是, 一个标题栏点击之后高亮, 再次点击又变回原样, 我们可以用addClass和removeClass来实现.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"h2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span> ($(<span class="keyword">this</span>).hasClass(<span class="string">"highlight"</span>))&#123;</div><div class="line">    $(<span class="keyword">this</span>).removeClass(<span class="string">"highlight"</span>)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).addClass(<span class="string">"highlight"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>但对于一个常用的功能, 这种实现显然还是比较繁琐, 因此,jQuery提供了一种非常简洁的方法来实现这一功能, 那就是toggleClass, 上面的代码可以用下面这一行代码来代替:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"h2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="string">"h2"</span>).toggleClass(<span class="string">"highlight"</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><strong>判断样式是否存在</strong></p>
<p>hasClass方法可以用来判断元素中是否包含某个class.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"h2"</span>).hasClass(<span class="string">"highlight"</span>)</div></pre></td></tr></table></figure>
<p>用法非常简单. </p>
<p>关于jQuery 对样式的操作大致就这么多了, 下一篇我会介绍jQuery中Dom操作中的其他内容.</p>
<p>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;DOM操作之 属性与样式&lt;/p&gt;
&lt;p&gt;​    在上一篇jQuery笔记1中把DOM元素节点的常用操作都介绍了一遍, 这一篇笔记仍是有关jQuery DOM的操作, 主要是DOM节点中属性与样式的添加, 更改删除等操作&lt;/p&gt;
&lt;h4 id=&quot;属性操作&quot;
    
    </summary>
    
    
      <category term="jQuery" scheme="https://peakhell.github.io/peakhell-web/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery笔记(1) - 常见的DOM操作</title>
    <link href="https://peakhell.github.io/peakhell-web/2017/06/27/jQuery%E7%AC%94%E8%AE%B0/"/>
    <id>https://peakhell.github.io/peakhell-web/2017/06/27/jQuery笔记/</id>
    <published>2017-06-27T07:27:35.000Z</published>
    <updated>2017-07-03T03:18:04.184Z</updated>
    
    <content type="html"><![CDATA[<p>​    jQuery非常好用, 但是也有一些地方要多加留意, 这里总结一下我犯过错误, 权当前车之鉴, 希望各位不要犯和我一样的错.</p>
<ol>
<li>判断元素是否存在</li>
</ol>
<p>判断元素是否存在在前端中应该是常见的操作, 在使用jQuery进行判断时要多加小心, 先看下面的代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ($(<span class="string">'.fly'</span>))&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'i can fly'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码看似没有问题, 但由于$(‘.fly’)返回的永远是一个对象, 所以不管<code>.fly</code>存不存在, 判断永远都是True. 正确的判断方法应该是根据元素的长度来判断.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ($(<span class="string">'.fly'</span>)&gt;<span class="number">0</span>):</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'i can fly'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>常见的Dom操作</li>
</ol>
<p>Dom操作主要是对元素节点进行创建, 插入, 删除, 复制, 替换等操作, jQuery提供了一系列的方法方便的对节点进行操作, 但由于Dom操作繁琐复杂, 这里做一个常用Dom操作的总结. 以系统性的学习Dom操作. 为方便理解, 这里以下面的html代码为例进行讲解.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"go"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>围棋国手<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"柯洁"</span>&gt;</span>柯洁<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"唐韦星"</span>&gt;</span>唐韦星<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"李世石"</span>&gt;</span>李世石<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>创建元素节点</li>
</ul>
<p>jQuery使用工厂函数$()来创建元素节点. 格式是这样的 </p>
<p><code>$(html)</code></p>
<p>例如在创建两个li标签, 可以这么写</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $li1 = $(<span class="string">"&lt;li&gt;时越&lt;/li&gt;"</span>)</div><div class="line"><span class="keyword">var</span> $li2 = $(<span class="string">"&lt;li&gt;姜东润&lt;/li&gt;"</span>)</div></pre></td></tr></table></figure>
<p>注意这里的变量命名, 前面有个$, 这是为了区分jQuery对象与Dom对象. 上面的代码创建了两个包含文本的li标签,  我们还可以直接创建带有属性值的标签.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $li3 = $(<span class="string">"&lt;li class='china' title='胡跃峰'&gt;胡跃峰&lt;/li&gt;"</span>)</div></pre></td></tr></table></figure>
<ul>
<li><p>插入元素节点</p>
<p>插入元素节点有很多种方法, 一般而言用的最多的是以下这几个:</p>
</li>
</ul>
<p><code>append()</code> : 向每个匹配的元素中添加内容. 添加的元素在尾部 </p>
<p><code>appendTo()</code>: 将所有匹配的元素追加到指定的元素. 添加的元素在尾部</p>
<p><code>pretend()</code> : 向每个匹配的元素中添加内容. 添加的元素在头部</p>
<p><code>pretendTo()</code> : 将所有匹配的元素添加到指定的元素中, 添加的元素在头部.</p>
<p><code>after()</code>: 在每个匹配的元素之后插入内容</p>
<p><code>before()</code>: 在每个匹配的元素之前插入内容</p>
<p>​    当然jQuery还提供了很多方法供我们插入Dom元素. 但最常见的操作主要还是以上集中, 下面仔细介绍每一种方法的用法.</p>
<p><strong>append</strong></p>
<p>​    append()应该是用的最多插入元素节点的方法了, 其用法也很简单, 先用jQuery选择器选中元素, 然后使用append()方法添加需要添加的元素就可以了.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"ul"</span>).append($li1)</div><div class="line">$(<span class="string">"ul"</span>).append($li2)</div></pre></td></tr></table></figure>
<p>​    上面的代码会在ul标签的内部后面追加两个li标签. 在chrome中可以看到html代码变成了</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"go"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>围棋国手<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"柯洁"</span>&gt;</span>柯洁<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"唐韦星"</span>&gt;</span>唐韦星<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"李世石"</span>&gt;</span>李世石<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>时越<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>姜东润<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>appendTo</strong></p>
<p>​    在插入元素的功能上与append一致, 但用法却正好相反, 看个例子就明白了.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$li1.appendTo(<span class="string">"ul"</span>)</div><div class="line">$li2.appendTo(<span class="string">"ul"</span>)</div></pre></td></tr></table></figure>
<p>生成代码与上个例子的append相同, 但与append的用法不同.两相比较就明白了.</p>
<p><strong>pretend</strong></p>
<p>​    pretend 的用法与append一致, 稍有不同的地方是pretend会在头部追加元素节点.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"ul"</span>).prepend($li1)</div><div class="line">$(<span class="string">"ul"</span>).prepend($li2)</div></pre></td></tr></table></figure>
<p>在chrome中查看源码:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"go"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>围棋国手<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>姜东润<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>时越<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"柯洁"</span>&gt;</span>柯洁<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"唐韦星"</span>&gt;</span>唐韦星<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"李世石"</span>&gt;</span>李世石<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>pretendTo</strong></p>
<p>​    无需多说了吧.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$li1.pretendTo(<span class="string">"ul"</span>)</div><div class="line">$li2.pretendTo(<span class="string">"ul"</span>)</div></pre></td></tr></table></figure>
<p>​    最后的效果与pretend的例子相同.</p>
<p><strong>after</strong></p>
<p>after会在每个匹配的元素后面添加元素节点, 也就是说使用after插入的是同级元素.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"li:eq(1)"</span>).after($li1)</div></pre></td></tr></table></figure>
<p>上面的代码意思是在第二个li元素后面添加$li1元素节点. 最后的源码是这样的.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"go"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>围棋国手<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"柯洁"</span>&gt;</span>柯洁<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"唐韦星"</span>&gt;</span>唐韦星<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          	<span class="tag">&lt;<span class="name">li</span>&gt;</span>时越<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"李世石"</span>&gt;</span>李世石<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>before</strong></p>
<p>before会在每个匹配的元素前面添加元素节点, 表现的也是同级元素之间的关系.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"li:eq(1)"</span>).before($li1)</div></pre></td></tr></table></figure>
<p>上面的代码意思是在第二个li元素前面添加$li1元素节点, 最后的源码是这样的.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"go"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>围棋国手<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"柯洁"</span>&gt;</span>柯洁<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>时越<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"唐韦星"</span>&gt;</span>唐韦星<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"李世石"</span>&gt;</span>李世石<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>常见的元素节点的插入主要有以上几种, 注意这些都是可以配合使用的. </p>
<ul>
<li>删除元素节点</li>
</ul>
<p>元素节点的删除主要有三种方法, remove, detach 和empty.</p>
<p><strong>remove</strong></p>
<p>remove方法是从DOM中删除所有匹配的元素</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"ul&gt;li"</span>).remove()</div></pre></td></tr></table></figure>
<p>如上面的代码会把页面中所有的li标签删除,  当每个节点用remove方法删除后, 该节点所包含的后代节点将同时被删除. 还有一点很有趣, 就是该方法会返回指向删除节点的引用, 也就是说, 我们后续如果需要的话, 还是可以调用的.看下面的代码.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $li = $(<span class="string">"ul&gt;li:eq(1)"</span>).remove()  <span class="comment">// 删除第二个li标签</span></div><div class="line">$li.appendTo(<span class="string">"ul"</span>)				     <span class="comment">// 把删除的标签添加到ul标签的内部</span></div></pre></td></tr></table></figure>
<p>你会发现被删除的元素还是可以被引用的. </p>
<p>还有一点需要注意的是, remove 是可以带参数的, 其含义是通过传递的参数进行选择性的删除元素.例如我们删除页面中title不为柯洁的标签可以这么写</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"ul li"</span>).remove(<span class="string">"li[title!=柯洁]"</span>)</div></pre></td></tr></table></figure>
<p><strong>detach</strong></p>
<p>和remove一样, 也是从DOM中删除所有匹配的元素, 并且节点仍是可以引用的. 和remove的不同点只有一个, 那就是使用detach删除的元素, 其中所有绑定的时间, 附加的数据都会保留下来. 而remove则不会.下面的例子可以说明这一点.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"ul li"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">  	$(<span class="keyword">this</span>).css(<span class="string">"color"</span>,<span class="string">"#888"</span>)</div><div class="line">&#125;)            <span class="comment">// 给li标签绑定事件</span></div><div class="line">$li = $(<span class="string">"ul li"</span>).detach()  <span class="comment">// 使用detach 删除元素</span></div><div class="line">$li.appendTo(<span class="string">"ul"</span>)         <span class="comment">// 把删除的元素重新添加到ul标签内部</span></div></pre></td></tr></table></figure>
<p>你会发现li标签绑定的事件仍是起作用的, 这说明detach方法返回的对象会保留标签绑定的方法以及附加的数据, 如果把上例中的detach 换成 remove, 则li 标签的事件不会起作用.这就是detach和remove 这两个方法之间的区别.</p>
<p><strong>empty</strong></p>
<p>准确点来说, empty是清空操作, empty方法会把选中元素的所有后代节点清空. </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"ul"</span>).empty</div></pre></td></tr></table></figure>
<p>上面的方法会把ul内部的元素节点全部清空. </p>
<ul>
<li>元素节点的复制 </li>
</ul>
<p>节点的复制也是DOM操作中常见的一个操作. </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"ul li:eq(1)"</span>).clone().appendTo(<span class="string">"ul"</span>)</div></pre></td></tr></table></figure>
<p>上面的代码会复制第二个li标签并添加到ul内部. 需要注意的是这样写复制的节点不具有任何行为和附加数据, 若要继承原始节点所拥有的事件行为或附加数据, 应在clone方法中添加参数true</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(&quot;ul li:eq(1)&quot;).clone(true).appendTo(&quot;ul&quot;)</div></pre></td></tr></table></figure>
<ul>
<li>替换元素节点</li>
</ul>
<p>jQuery提供了两种方法用以替换某个元素节点, 即replaceWith 和 replaceAll. replaceWith会把所有匹配的元素都替换成指定的HTML或者DOM元素.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $li1 = $(<span class="string">"&lt;li&gt;时越&lt;/li&gt;"</span>)</div><div class="line">$(<span class="string">"ul li[title=柯洁]"</span>).replaceWith($li1)</div></pre></td></tr></table></figure>
<p>上面的代码会把li标签为柯洁那一行替换成指定的html.</p>
<p>也可以用replaceAll来完成, 两者的功能完全一致, 只是replaceAll颠倒了操作的顺序.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$li1.replaceAll(<span class="string">"ul li[title=柯洁]"</span>)</div></pre></td></tr></table></figure>
<ul>
<li>包裹元素节点</li>
</ul>
<p>如果要把某个节点用其他标签包裹起来, jQuery也提供了相对应的方法, 这是非常有用的.主要有三种wrap, wrapAll和wrapInner</p>
<p>例如我们要把li标签中的某些个表示强调, 可以用strong标签将其包裹起来. 使用jQuery可以这么写:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"ul li"</span>).wrap(<span class="string">"&lt;strong&gt;&lt;/strong&gt;"</span>)</div></pre></td></tr></table></figure>
<p>查看源码, 会发现所有的li 标签都被strong标签包裹. 如下所示:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"go"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>围棋国手<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"柯洁"</span>&gt;</span>柯洁<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"唐韦星"</span>&gt;</span>唐韦星<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"李世石"</span>&gt;</span>李世石<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>与wrap不同, wrapAll方法会对选中的元素整体进行包裹. </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"ul li"</span>).wrapAll(<span class="string">"&lt;strong&gt;&lt;/strong&gt;"</span>)</div></pre></td></tr></table></figure>
<p>注意看源码, 会发现所有的li标签都被包裹在一个strong标签中</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"go"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>围棋国手<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"柯洁"</span>&gt;</span>柯洁<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"唐韦星"</span>&gt;</span>唐韦星<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"李世石"</span>&gt;</span>李世石<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span>     </div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>还有一个包裹的方法是wrapInner,  该方法将每一个匹配的元素的子内容(包括文本节点)用其他结构化的标记包裹起来</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"ul li"</span>).wrapInner(<span class="string">"&lt;strong&gt;&lt;/strong&gt;"</span>)</div></pre></td></tr></table></figure>
<p>观察源码,会发现strong会被添加到li标签的内部, 并对其中的文本进行包裹.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"go"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>围棋国手<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"柯洁"</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>柯洁<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"唐韦星"</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>唐韦星<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">title</span>=<span class="string">"李世石"</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>李世石<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>​    </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    jQuery非常好用, 但是也有一些地方要多加留意, 这里总结一下我犯过错误, 权当前车之鉴, 希望各位不要犯和我一样的错.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;判断元素是否存在&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;判断元素是否存在在前端中应该是常见的操作, 在使用jQuery进行
    
    </summary>
    
    
      <category term="jQuery" scheme="https://peakhell.github.io/peakhell-web/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>python3 虚拟环境常用操作</title>
    <link href="https://peakhell.github.io/peakhell-web/2017/06/19/%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%9A%84%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    <id>https://peakhell.github.io/peakhell-web/2017/06/19/一些常用的操作总结/</id>
    <published>2017-06-19T09:43:36.000Z</published>
    <updated>2017-06-28T07:39:42.478Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>Python 中的virtualenv</p>
<p>python中的虚拟环境是个好东西, 使用Python进行项目开发的过程中往往会有会安装很多第三方包, 如果全部都安装在全局变量中的话无疑会使全局环境变得混乱. 虚拟环境完美的解决了这一问题, 把项目中要安装的第三方包安装在虚拟环境中, 这样就可以保持全局变量的干净, 更重要的是, 如果要在另一台电脑中复现相同的环境, 也可以非常容易的复现出来.</p>
<ul>
<li>创建python3的虚拟环境</li>
</ul>
<p>使用virtualenv默认创建的是linux下的默认Python版本, 也就是python2.7版本, 像我这种用python3的就不能直接用默认的命令,要加一个参数.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">virtualenv -p python3 venv</div></pre></td></tr></table></figure>
<p>当然, 每次都这么打肯定烦死, 一个一劳永逸的方法是把python3 当做默认的python版本, 这样就不用每次都打这么长了. 把python3当成默认的python版本主要有两种方法, 一种是别名, 一种是直接修改系统的设置. 这里只说第一种. </p>
<p>编辑自己home目录下的.bashrc文件, 并在最后加上一句</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alias python='python3'</div></pre></td></tr></table></figure>
<p>​</p>
<p><img src="/peakhell-web/2017/06/19/一些常用的操作总结/alias.jpg" alt="alias"></p>
<p>顺便安利一下这个alias别名命令, 非常好用, 可以把常用的冗长的命令起个剪短的别名, 方便使用.</p>
<ul>
<li>使用sudo时虚拟环境中的包检测不到</li>
</ul>
<p>有一次我要在80端口启动flask程序, 前1024位都是系统服务端口, 必须启用管理员权限才能打开. 于是我在虚拟环境中使用了如下的命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo python3 manager.py runserver --host 0.0.0.0 -p 80</div></pre></td></tr></table></figure>
<p>但是却报了如下的错误.</p>
<p><img src="/peakhell-web/2017/06/19/一些常用的操作总结/models.jpg" alt="flask"></p>
<p>flask包没有安装, 可是虚拟环境中已经安装了啊. 这时候要注意了, 你已经掉入了linux sudo中的一个小坑了. 先用下面的命令查看这条命令使用了哪个地方的python3</p>
<p><img src="/peakhell-web/2017/06/19/一些常用的操作总结/envir.jpg" alt=""></p>
<p>​可以看到, 当使用了sudo之后, 这时候的python是全局中的python, 而并不是虚拟环境中的python, 自然虚拟环境中的包就无法调用了.解决方法是将python换成虚拟环境中的python,可以这么写</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo venv/bin/python3 manager.py runserver --host 0.0.0.0 -p 80</div></pre></td></tr></table></figure>
<p>​</p>
<p>​</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;Python 中的virtualenv&lt;/p&gt;
&lt;p&gt;python中的虚拟环境是个好东西, 使用Python进行项目开发的过程中往往会有会安装很多第三方包, 如果全部都安装在全局变量中的话无疑会使全局环境变得混乱. 虚拟环境完美的解决了这一问题, 把项目中
    
    </summary>
    
    
      <category term="python virtualenv" scheme="https://peakhell.github.io/peakhell-web/tags/python-virtualenv/"/>
    
  </entry>
  
  <entry>
    <title>Flask Api 总结</title>
    <link href="https://peakhell.github.io/peakhell-web/2017/06/09/Flask-Api-%E6%80%BB%E7%BB%93/"/>
    <id>https://peakhell.github.io/peakhell-web/2017/06/09/Flask-Api-总结/</id>
    <published>2017-06-09T04:01:11.000Z</published>
    <updated>2017-06-28T07:46:39.290Z</updated>
    
    <content type="html"><![CDATA[<p>​    最近使用flask做一个客户端的api接口, 学到了不少, 在这里总结用一下, 权当笔记.</p>
<p>​    http 协议中共有8种请求方法, 常用的有6种,  如下所示:</p>
<ul>
<li><strong>GET     请求获取Request-URI所标识的资源</strong></li>
</ul>
<ul>
<li><strong>POST    在Request-URI所标识的资源后附加新的数据</strong></li>
</ul>
<ul>
<li>HEAD    请求获取由Request-URI所标识的资源的响应消息报头</li>
</ul>
<ul>
<li>PUT     请求服务器存储一个资源，并用Request-URI作为其标识</li>
</ul>
<ul>
<li><p>DELETE  请求服务器删除Request-URI所标识的资源</p>
</li>
<li><p>OPTIONS 请求查询服务器的性能，或者查询与资源相关的选项和需求</p>
<p>其中我们在开发过程中最常用的就是<strong>GET和POST</strong>请求方式.</p>
<ol>
<li>flask中处理GET请求</li>
</ol>
<p>首先我们要知道, GET请求是明文请求, 它会把所有的参数都拼接在URL后面. 我们可以用先看个例子.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">	<span class="attr">url</span>: <span class="string">"/sample/download_report"</span>,</div><div class="line">	<span class="attr">type</span>: <span class="string">"GET"</span>, </div><div class="line">	<span class="attr">data</span>: &#123;<span class="string">"sampleNumber"</span>:<span class="number">1</span>&#125;, </div><div class="line">	<span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;  </div><div class="line">	data.save() </div><div class="line">	&#125;   </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这是用jQuery写的使用GET请求方法向后端请求资源的方法. 可以看到我们构造了一个data, 并向url为”/sample/download_report”(相对地址)请求资源. 那么实际上上面的请求相当于</p>
<p><code>/smaple/download_report?sampleNumber=1</code></p>
<p>​    这一点要注意, 那么flask中怎么获取前端传来的请求数据呢.很简单, 以上面的代码为例, 我们要在flask中获取sampleNumber的话,只要</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</div><div class="line"><span class="meta">@api.route('/sample/download_report', methods=['GET'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sample_bind</span><span class="params">()</span>:</span></div><div class="line">	sampleNumber = request.args.get(<span class="string">"sampleNumber"</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>关键的语句就是<code>request.args.get(&#39;sampleNumber&#39;)</code></p>
<p>然后对输入的数据进行处理, 并返回就行了.</p>
<ol>
<li>Flask中处理POST请求.</li>
</ol>
<p>处理POST请求稍微麻烦一点. 但falsk同样提供了方法供我们获取前端的数据.</p>
<p>前端请求数据代码:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = &#123;    <span class="string">"username"</span>: <span class="string">"peakhell"</span>, <span class="string">"sample_id"</span>: <span class="number">1</span>  &#125;;</div><div class="line">$.ajax(&#123;</div><div class="line">	<span class="attr">url</span> : <span class="string">"/test"</span>,</div><div class="line">	<span class="attr">type</span>: <span class="string">"POST"</span>,</div><div class="line">	<span class="attr">headers</span>: &#123;</div><div class="line">	<span class="string">'Content-Type'</span>:<span class="string">'application/json'</span>    &#125;,       </div><div class="line">	<span class="attr">data</span>: <span class="built_in">JSON</span>.stringify(data),    </div><div class="line">	<span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;        <span class="built_in">console</span>.log(<span class="string">"success"</span>)    &#125;    </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>首先声明请求方式为POST, 然后将字典数据json化.</p>
<p>这个时候flask怎么获取POST的数据呢</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@api.route("/test", methods=['GET', 'POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">	sample_id = request.json.get(<span class="string">'sample_id'</span>)</div></pre></td></tr></table></figure>
<p>使用request.json.get()获取json数据即可.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    最近使用flask做一个客户端的api接口, 学到了不少, 在这里总结用一下, 权当笔记.&lt;/p&gt;
&lt;p&gt;​    http 协议中共有8种请求方法, 常用的有6种,  如下所示:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GET     请求获取Request-
    
    </summary>
    
    
      <category term="flask python" scheme="https://peakhell.github.io/peakhell-web/tags/flask-python/"/>
    
  </entry>
  
  <entry>
    <title>让D3绘制的力导向图发光</title>
    <link href="https://peakhell.github.io/peakhell-web/2017/05/31/%E8%AE%A9D3%E7%BB%98%E5%88%B6%E7%9A%84%E5%8A%9B%E5%AF%BC%E5%90%91%E5%9B%BE%E5%8F%91%E5%85%89/"/>
    <id>https://peakhell.github.io/peakhell-web/2017/05/31/让D3绘制的力导向图发光/</id>
    <published>2017-05-31T09:57:19.000Z</published>
    <updated>2017-05-31T09:57:19.575Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>写给快要毕业的自己</title>
    <link href="https://peakhell.github.io/peakhell-web/2017/05/18/%E5%86%99%E7%BB%99%E5%BF%AB%E8%A6%81%E6%AF%95%E4%B8%9A%E7%9A%84%E8%87%AA%E5%B7%B1/"/>
    <id>https://peakhell.github.io/peakhell-web/2017/05/18/写给快要毕业的自己/</id>
    <published>2017-05-18T03:46:24.000Z</published>
    <updated>2017-06-27T02:16:55.575Z</updated>
    
    <content type="html"><![CDATA[<p>​    不知不觉中毕业季都快过去了. 和南区三傻聚完餐, 我便匆匆搭乘公交回到公司, 一如既往的拥挤, 空气中弥漫着空调与汽油的混合气味,不好闻但也可以忍受. 路上还坐反了一次公交, 以至于回到中科院宿舍时, 都已经快10点了.  第二天的早上8点, 又要开始一天的上班生活了, 写代码,看文档,查谷歌… 生活的轨迹似乎前所未有的明确. 除了这个月末最后一次的毕业典礼, 就再也没有什么事情要回深大处理了. 毕业, 就近在眼前了.</p>
<p>​    虽然不是第一次毕业, 但这一次, 是特殊的. 不读研的我, 从此就要走向社会, 走上工作之路了. 说不上太多的伤感, 只是有时候会觉得要是回到大一该多好啊, 再去经历一次大学生活, 和朋友们一起去桂庙吃宵夜与烧烤, 聊一聊课程八卦与未来. 只是现在再聚, 恐怕再也没有之前的意气了. 临近毕业, 我们仍是嘻嘻哈哈的打着游戏互怼, 煲粥聊天玩手机. 在1627这个宿舍, 好像我们都可以毫无顾忌的展示自己最慵懒而自然的状态. 只是日后, 不知何时还能聚在一起开黑玩游戏了.</p>
<p>​    就这样吧, 想起江南在&lt;此间的少年&gt;中开篇所写道:  而当记忆中的场景再次出现在眼前的时候，我忽然意识到，终有一天我们的过往都会被讲述成一个故事，这个故事可以有很多种讲法，可以有不同的主角，不同的喜悦或者悲伤，但无论怎样，所有的故事都始于一个同样的开头，喧嚣或沉默着的每一个人，都将各怀心事地登场。于是我回忆起那一年我们的相逢，这是一个故事所需要的开场。</p>
<p>​    </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    不知不觉中毕业季都快过去了. 和南区三傻聚完餐, 我便匆匆搭乘公交回到公司, 一如既往的拥挤, 空气中弥漫着空调与汽油的混合气味,不好闻但也可以忍受. 路上还坐反了一次公交, 以至于回到中科院宿舍时, 都已经快10点了.  第二天的早上8点, 又要开始一天的上班生
    
    </summary>
    
      <category term="杂想" scheme="https://peakhell.github.io/peakhell-web/categories/%E6%9D%82%E6%83%B3/"/>
    
    
      <category term="故事" scheme="https://peakhell.github.io/peakhell-web/tags/%E6%95%85%E4%BA%8B/"/>
    
  </entry>
  
</feed>
