<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Peakhell的个人网站</title>
  <subtitle>编程,围棋,故事</subtitle>
  <link href="/peakhell-web/atom.xml" rel="self"/>
  
  <link href="https://peakhell.github.io/peakhell-web/"/>
  <updated>2017-06-15T08:24:12.313Z</updated>
  <id>https://peakhell.github.io/peakhell-web/</id>
  
  <author>
    <name>peakhell</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flask Api 总结</title>
    <link href="https://peakhell.github.io/peakhell-web/2017/06/09/Flask-Api-%E6%80%BB%E7%BB%93/"/>
    <id>https://peakhell.github.io/peakhell-web/2017/06/09/Flask-Api-总结/</id>
    <published>2017-06-09T04:01:11.000Z</published>
    <updated>2017-06-15T08:24:12.313Z</updated>
    
    <content type="html"><![CDATA[<p>​    最近使用flask做一个客户端的api接口, 学到了不少, 在这里总结用一下, 权当笔记.</p>
<p>​    http 协议中共有8种请求方法, 常用的有6种,  如下图:</p>
<ul>
<li><strong>GET     请求获取Request-URI所标识的资源</strong></li>
</ul>
<ul>
<li><strong>POST    在Request-URI所标识的资源后附加新的数据</strong></li>
</ul>
<ul>
<li>HEAD    请求获取由Request-URI所标识的资源的响应消息报头</li>
</ul>
<ul>
<li>PUT     请求服务器存储一个资源，并用Request-URI作为其标识</li>
</ul>
<ul>
<li><p>DELETE  请求服务器删除Request-URI所标识的资源</p>
</li>
<li><p>OPTIONS 请求查询服务器的性能，或者查询与资源相关的选项和需求</p>
<p>其中我们在开发过程中最常用的就是<strong>GET和POST</strong>请求方式.</p>
<ol>
<li>flask中处理GET请求</li>
</ol>
<p>首先我们要知道, GET请求是明文请求, 它会把所有的参数都拼接在URL后面. 我们可以用先看个例子.</p>
<p><code>$.ajax({</code></p>
<p>​    <code>url: &quot;/sample/download_report&quot;,</code></p>
<p>​    <code>type: &quot;GET&quot;,</code> </p>
<p>​    <code>data: {&quot;sampleNumber&quot;:1},</code> </p>
<p>​    <code>success: function (data) {</code>  </p>
<p>​    <code>data.save()</code> </p>
<p>​    <code>}</code>   </p>
<p><code>})</code> </p>
<p>这是用jQuery写的使用GET请求方法向后端请求资源的方法. 可以看到我们构造了一个data, 并向url为”/sample/download_report”(相对地址)请求资源. 那么实际上上面的请求相当于</p>
<p><code>/smaple/download_report?sampleNumber=1</code></p>
<p>​    这一点要注意, 那么flask中怎么获取前端传来的请求数据呢.很简单, 以上面的代码为例, 我们要在flask中获取sampleNumber的话,只要</p>
<p><code>from flask import request</code></p>
<p><code>@api.route(&#39;/sample/download_report&#39;, methods=[&#39;GET&#39;])</code></p>
<p><code>def sample_bind():</code></p>
<p>​    <code>sampleNumber = request.args.get(&quot;sampleNumber&quot;)</code></p>
</li>
</ul>
<p>关键的语句就是<code>request.args.get(&#39;sampleNumber&#39;)</code></p>
<p>然后对输入的数据进行处理, 并返回就行了.</p>
<pre><code>2.    flask中处理POST请求.
</code></pre><p>处理POST请求稍微麻烦一点. 但falsk同样提供了方法供我们获取前端的数据.</p>
<p>前端请求数据代码:</p>
<p><code>var data = {    &quot;username&quot;: &quot;peakhell&quot;,</code> <code>&quot;sample_id&quot;: 1</code>  <code>};</code></p>
<p><code>$.ajax({</code></p>
<p>​    <code>url : &quot;/test&quot;,</code></p>
<p>​    <code>type: &quot;POST&quot;,</code></p>
<p>​    <code>headers: {</code></p>
<p>​    <code>&#39;Content-Type&#39;:&#39;application/json&#39;    },</code>       </p>
<p>​    <code>data: JSON.stringify(data),</code>    </p>
<p>​    <code>success: function(data){        console.log(&quot;success&quot;)    }</code>    </p>
<p><code>});</code></p>
<p>首先声明请求方式为POST, 然后将字典数据json化.</p>
<p>这个时候flask怎么获取POST的数据呢</p>
<p><code>@api.route(&quot;/test&quot;, methods=[&#39;GET&#39;, &#39;POST&#39;])</code></p>
<p><code>def test():</code></p>
<p>​    <code>sample_id = request.json.get()&#39;sample_id&#39;)</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    最近使用flask做一个客户端的api接口, 学到了不少, 在这里总结用一下, 权当笔记.&lt;/p&gt;
&lt;p&gt;​    http 协议中共有8种请求方法, 常用的有6种,  如下图:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GET     请求获取Request-U
    
    </summary>
    
    
      <category term="flask" scheme="https://peakhell.github.io/peakhell-web/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>让D3绘制的力导向图发光</title>
    <link href="https://peakhell.github.io/peakhell-web/2017/05/31/%E8%AE%A9D3%E7%BB%98%E5%88%B6%E7%9A%84%E5%8A%9B%E5%AF%BC%E5%90%91%E5%9B%BE%E5%8F%91%E5%85%89/"/>
    <id>https://peakhell.github.io/peakhell-web/2017/05/31/让D3绘制的力导向图发光/</id>
    <published>2017-05-31T09:57:19.000Z</published>
    <updated>2017-05-31T09:57:19.575Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>写给快要毕业的自己</title>
    <link href="https://peakhell.github.io/peakhell-web/2017/05/18/%E5%86%99%E7%BB%99%E5%BF%AB%E8%A6%81%E6%AF%95%E4%B8%9A%E7%9A%84%E8%87%AA%E5%B7%B1/"/>
    <id>https://peakhell.github.io/peakhell-web/2017/05/18/写给快要毕业的自己/</id>
    <published>2017-05-18T03:46:24.000Z</published>
    <updated>2017-06-05T12:59:33.981Z</updated>
    
    <content type="html"><![CDATA[<p>​    不知不觉中毕业季都快过去了. 和南区三傻聚完餐, 我便匆匆搭乘公交回到公司, 一如既往的拥挤, 空气中弥漫着空调与汽油的混合气味,不好闻但也可以忍受. 路上还坐反了一次公交, 以至于回到中科院宿舍时, 都已经快10点了.  第二天的早上8点, 又要开始一天的上班生活了, 写代码,看文档,查谷歌… 生活的轨迹似乎前所未有的明确. 除了这个月末最后一次的毕业典礼, 就再也没有什么事情要回深大处理了. 毕业, 就近在眼前了.</p>
<p>​    虽然不是第一次毕业, 但这一次, 是特殊的. 不读研的我, 从此就要走向社会, 走上工作之路了. 说不上太多的伤感, 只是有时候会觉得要是回到大一该多好啊, 再去经历一次大学生活, 和朋友们一起去桂庙吃宵夜与烧烤, 聊一聊课程八卦与未来. 只是现在再聚, 恐怕再也没有之前的意气了.</p>
<p>​        </p>
<p>​    </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    不知不觉中毕业季都快过去了. 和南区三傻聚完餐, 我便匆匆搭乘公交回到公司, 一如既往的拥挤, 空气中弥漫着空调与汽油的混合气味,不好闻但也可以忍受. 路上还坐反了一次公交, 以至于回到中科院宿舍时, 都已经快10点了.  第二天的早上8点, 又要开始一天的上班生
    
    </summary>
    
      <category term="杂想" scheme="https://peakhell.github.io/peakhell-web/categories/%E6%9D%82%E6%83%B3/"/>
    
    
      <category term="故事" scheme="https://peakhell.github.io/peakhell-web/tags/%E6%95%85%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>git常用操作2</title>
    <link href="https://peakhell.github.io/peakhell-web/2017/05/09/git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C2/"/>
    <id>https://peakhell.github.io/peakhell-web/2017/05/09/git常用操作2/</id>
    <published>2017-05-09T07:19:46.000Z</published>
    <updated>2017-05-18T07:43:56.507Z</updated>
    
    <content type="html"><![CDATA[<p>​    第一节主要介绍了git操作中常用到的添加,提交,版本切换,以及添加错误信息之后的撤销操作.这些操作都是在同一分支上的,这一节介绍一下git中一个非常重要的功能–分支.</p>
<ol>
<li><p>什么是分支</p>
<p>设想你正在开发一个程序, 老板要你开发一个新的功能,几个小时后,你开发完成.并提交上git.这时你收到老板的消息,经费不足,新功能取消,虽然操蛋,但是你还是得照办,于是你把版本回退到上一个.等等,这时候新功能我还想留着自己玩怎么办.git提供了分支来实现这个功能. 当开发一个项目新功能时, 我们可以开一个分支, 在分支上开发,这样就不会影响主分支,等确认开发完毕我们在和主分支进行合并.这样就很保险了.</p>
</li>
<li><p>创建新分支</p>
<p>在git中创建新分支十分简单, 新建一个分支:</p>
<p>​    <code>git branch dev</code>  </p>
<p>新建并切换到建立的分支:</p>
<p>​    <code>git checkout -b dev</code></p>
<p>相当于下面两个命令:</p>
<p>​    <code>gitbranch dev</code></p>
<p>​    <code>git chekcout dev</code></p>
<p>还有一个非常常用的命令是查看分支状态:</p>
<p>​    <code>git branch</code></p>
<p>这个命令将会列出所有的分支并指出当前处于哪个分支.</p>
<p>​</p>
<p>​</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    第一节主要介绍了git操作中常用到的添加,提交,版本切换,以及添加错误信息之后的撤销操作.这些操作都是在同一分支上的,这一节介绍一下git中一个非常重要的功能–分支.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;什么是分支&lt;/p&gt;
&lt;p&gt;设想你正在开发一个程序, 老板要你开发
    
    </summary>
    
      <category term="编程" scheme="https://peakhell.github.io/peakhell-web/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="git" scheme="https://peakhell.github.io/peakhell-web/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git常用操作1</title>
    <link href="https://peakhell.github.io/peakhell-web/2017/05/05/git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C1/"/>
    <id>https://peakhell.github.io/peakhell-web/2017/05/05/git常用操作1/</id>
    <published>2017-05-05T07:19:40.000Z</published>
    <updated>2017-05-18T07:05:46.426Z</updated>
    
    <content type="html"><![CDATA[<p> Git 是一个非常优秀的版本控制系统。最近在项目中常常用到Git，因此总结了这段时间常用到的操作与踩过的坑，当做一个学习笔记。</p>
<ol>
<li><p><strong>添加多个文件</strong></p>
<p> 在git中添加单个文件很简单，用下面的命令就可以了。</p>
<p> <code>git add &lt;filename&gt;</code></p>
<p> 但有时候我们可能一次性修改了很多文件，这时候一个一个添加显然不太可行，所幸git提供了提交多个文件的命令。</p>
<p> <code>git add .</code> 添加该目录下所有文件，但不包括删除的文件（常用）</p>
<p> <code>git add -A</code> 添加该目录下所有文件</p>
<p> 常用的添加多个文件的命令就上面两个，注意其中细微的区别。当然，大多数情况下用起来是一样的。只有当你用过</p>
<p> <code>git rm &lt;filename&gt;</code>删除文件后才有细微的区别。具体的区别看<a href="http://stackoverflow.com/questions/572549/difference-between-git-add-a-and-git-add" target="_blank" rel="external">这里</a> ,一般用不到，我也就不细讲了。</p>
</li>
<li><p><strong>版本切换</strong></p>
<p>提交多次之后，有时候可能对当前的开发不满意，想回退到上一个版本。git中用HEAD表示当前版本，上一次提交的版本是HEAD^,上上次提交的版本是HEAD^^,以此类推。那么想要回到上一次提交的命令就是</p>
<p><code>git reset --hard HEAD^</code></p>
</li>
</ol>
<p>等等，这样版本回退一两次还行，但是我已经忘记了要回退多少次怎么办？有办法的，首先使用命令<code>git log</code>查看提交的历史，以我的项目为例子，大概是这样子的。</p>
<p><img src="/peakhell-web/2017/05/05/git常用操作1/gitlog.png" alt="gitlog">gitlog</p>
<p> 找到你想要回退的那个版本，然后注意上面有个十六进制码commit id，这个是每次提交时git赋予的唯一标志码。使用这个就可以会退到想要回退的版本了。例如我们会退到“add gitignore file”那个版本。可以使用下面的命令。</p>
<p> <code>git reset --hard e9dadb</code></p>
<p> 注意不用写全，写前几位即可。当提交次数非常多时，这样查看可能就不太方便了，因为信息太多。我们可以让他在一行显示。</p>
<p> <code>git log --pertty=oneline</code></p>
<p> 效果大概是这样的</p>
<p><img src="/peakhell-web/2017/05/05/git常用操作1/oneline.png" alt="git log oneline">git log oneline</p>
<p> 要是我现在又反悔了，想要回到最新版本开发怎么办？先试试使用<code>git log</code>查看一下</p>
<p><img src="/peakhell-web/2017/05/05/git常用操作1/gitlog2.png" alt="git log 查看提交记录">git log 查看提交记录</p>
<p> 最新的提交记录不见了，怎么办？放心，在git中总是有后悔药可以吃的。git 提供了另一个命令，可以按时间查看提交记录。那就是reflog。我们用这个命令查看一下</p>
<p> <code>git reflog</code></p>
<p> 可以看到，最新的一次提交又出现了，接下来找到对应的commit id，再reset回去就好了。</p>
<p><img src="/peakhell-web/2017/05/05/git常用操作1/gitreflog.png" alt="git reflog"></p>
<p> 这个例子要回到最新的一个版本就是</p>
<p> <code>git reset --hard fb62</code></p>
<p> 总之，版本的切换命令用<code>git reset --hard &lt;commit id&gt;</code> ，而要找到对应提交的commit id 可以用<code>git log</code>和<code>git reflog</code> 。 如果记得要回到前几个版本，则可以用 <code>git reset --hard HEAD^</code> 。回退几个版本用几个^。</p>
<ol>
<li><strong>撤销修改与撤销添加</strong></li>
</ol>
<p><strong>撤销修改</strong></p>
<p> 设想你正在开发一个功能, 经过了一个上午的奋斗,你终于成功的开发了出来, 正当你准备提交的时候, 产品经理跟你说,这个功能取消吧,经费不够.操蛋虽操蛋,但该改还得改.如果你只修改了一个文件,可以这样</p>
<p> <code>git checkout -- &lt;filename&gt;</code></p>
<p> 如果是多个文件,那就用这个就行了.</p>
<p> <code>git checkout -- .</code></p>
<p>​</p>
<p><strong>撤销添加</strong></p>
<p> 非常不幸的,当你收到消息时,你已经添加了这个功能,但还好,还没有commit上去,这时候就要撤销添加了.</p>
<p> <code>git reset HEAD &lt;filename&gt;</code></p>
<p> 多个文件时,可以这样</p>
<p> <code>git reset HEAD .</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; Git 是一个非常优秀的版本控制系统。最近在项目中常常用到Git，因此总结了这段时间常用到的操作与踩过的坑，当做一个学习笔记。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;添加多个文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 在git中添加单个文件很简单，用下面的命令就可以
    
    </summary>
    
      <category term="编程" scheme="https://peakhell.github.io/peakhell-web/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="git" scheme="https://peakhell.github.io/peakhell-web/tags/git/"/>
    
  </entry>
  
</feed>
